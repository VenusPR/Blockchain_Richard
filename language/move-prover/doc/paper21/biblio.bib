@Misc{MOVE_LANG,
  author = {Sam Blackshear and Evan Cheng and David L. Dill and Victor Gao and
                  Ben Maurer and Todd Nowacki and Alistair Pott and Shaz Qadeer
                  and Rain and Dario Russi and Stephane Sezer and Tim Zakian and
                  Runtian Zho},
  title = {{Move: A Language With Programmable Resources}},
  institution = {},
  year = {2019},
  url = {https://developers.libra.org/docs/move-paper}
}

@InProceedings{MOVE_PROVER,
  author =	 "Zhong, Jingyi Emma and Cheang, Kevin and Qadeer, Shaz and
                  Grieskamp, Wolfgang and Blackshear, Sam and Park, Junkil and
                  Zohar, Yoni and Barrett, Clark and Dill, David L.",
  editor = "Lahiri, Shuvendu K.  and Wang, Chao",
  title = {{The Move Prover}},
  booktitle="Computer Aided Verification",
  year="2020",
  publisher="Springer International Publishing",
  pages="137--150",
}

@Misc{DIEM_FRAMEWORK,
  author = 	 {{The Diem Association}},
  title = 	 {{The Diem Framework}},
  year = 	 {2020},
  url = {https://github.com/libra/libra/tree/master/language/stdlib}
}

@Misc{DIEM,
  author = 	 {{The Diem Association}},
  title = 	 {{An Introduction to Diem}},
  url = {https://libra.org/en-US/white-paper/},
  year = 	 {2019},
}

@INPROCEEDINGS{LINEAR_TYPES,
    author = {Philip Wadler},
    title = {Linear Types Can Change the World!},
    booktitle = {PROGRAMMING CONCEPTS AND METHODS},
    year = {1990},
    publisher = {North}
}

@incollection{BORROW_SEM,
  author    = {Dave Clarke and
               Johan {\"{O}}stlund and
               Ilya Sergey and
               Tobias Wrigstad},
  editor    = {Dave Clarke and
               James Noble and
               Tobias Wrigstad},
  title     = {Ownership Types: {A} Survey},
  booktitle = {Aliasing in Object-Oriented Programming. Types, Analysis and Verification},
  series    = {Lecture Notes in Computer Science},
  volume    = {7850},
  pages     = {15--58},
  publisher = {Springer},
  year      = {2013},
  url       = {https://doi.org/10.1007/978-3-642-36946-9\_3},
  doi       = {10.1007/978-3-642-36946-9\_3},
  timestamp = {Tue, 14 May 2019 10:00:55 +0200},
  biburl    = {https://dblp.org/rec/series/lncs/ClarkeOSW13.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@Misc{BORROW_CHECKER,
  author = 	 {Sam Blackshear and Todd Nowacki and Shaz Qadeer and John Mitchell},
  title = 	 {The Move Borrow Checker},
  url = {TBD},
  year = 	 {2021},
}

@article{RUST_TYPES,
  author    = {Aaron Weiss and
               Daniel Patterson and
               Nicholas D. Matsakis and
               Amal Ahmed},
  title     = {Oxide: The Essence of Rust},
  journal   = {CoRR},
  volume    = {abs/1903.00982},
  year      = {2019},
  url       = {http://arxiv.org/abs/1903.00982},
  archivePrefix = {arXiv},
  eprint    = {1903.00982},
  timestamp = {Sat, 30 Mar 2019 19:27:21 +0100},
  biburl    = {https://dblp.org/rec/journals/corr/abs-1903-00982.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{RUST_SECURE,
author = {Jung, Ralf and Jourdan, Jacques-Henri and Krebbers, Robbert and Dreyer, Derek},
title = {RustBelt: Securing the Foundations of the Rust Programming Language},
year = {2017},
issue_date = {January 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2},
number = {POPL},
url = {https://doi.org/10.1145/3158154},
doi = {10.1145/3158154},
journal = {Proc. ACM Program. Lang.},
month = dec,
articleno = {66},
numpages = {34},
keywords = {logical relations, separation logic, type systems, Rust, concurrency}
}

@article{DESIGN_BY_CONTRACT,
author = {Meyer, Bertrand},
title = {Applying "Design by Contract"},
year = {1992},
issue_date = {October 1992},
publisher = {IEEE Computer Society Press},
address = {Washington, DC, USA},
volume = {25},
number = {10},
issn = {0018-9162},
url = {https://doi.org/10.1109/2.161279},
doi = {10.1109/2.161279},
journal = {Computer},
month = oct,
pages = {40–51},
numpages = {12}
}

@Misc{MOVE_LANG_DEF,
  author = 	 {{The Move Team}},
  title = 	 {{The Move Language Definition}},
  year = 	 {2020},
  url = {TBD},
}

@Misc{MOVE_SPEC_LANG_DEF,
  author = 	 {{The Move Team}},
  title = 	 {{The Move Specification Language}},
  year = 	 {2020},
  url = {TBD},
}

@Misc{BOOGIE,
   author = {{The Boogie Team}},
   title = {{Boogie Intermediate Verification Language}},
   url = {https://github.com/boogie-org/boogie}
}

@Misc{Z3,
   author = {{The Z3 Team}},
   title = {{Z3 Prover}},
   url = {https://github.com/Z3Prover/z3}
}

@Misc{CVC,
   author = {{The CVC Team}},
   title = {{CVC5}},
   url = {https://github.com/cvc5/cvc5}
}


@Misc{RUST,
   author = {{Steve Klabnik and Carol Nichols}},
   title = {{The Rust Programming Language}},
   url = {https://doc.rust-lang.org/book/}
}


@InProceedings{BUTTERFLY,
author = {Leino, Rustan and Pit-Claudel, Clément},
title = {Trigger Selection Strategies to Stabilize Program Verifiers},
year = {2016},
month = {January},
abstract = {SMT-based program verifiers often suffer from the so-called butterfly effect, in which minor modifications to the program source cause significant instabilities in verification times, which in turn may lead to spurious verification failures and a degraded user experience. This paper identifies matching loops (ill-behaved quantifiers causing an SMT solver to repeatedly instantiate a small set of quantified formulas) as a significant contributor to these instabilities, and describes some techniques to detect and prevent them. At their core, the contributed techniques move the trigger selection logic away from the SMT solver and into the high-level verifier: this move allows authors of verifiers to annotate, rewrite, and analyze user-written quantifiers to improve the solver’s performance, using information that is easily available at the source level but would be hard to extract from the heavily encoded terms that the solver works with. The paper demonstrates three core techniques (quantifier splitting, trigger sharing, and matching loop detection) by extending the Dafny verifier with its own trigger selection routine, and demonstrates significant predictability and performance gains on both Dafny’s test suite and large verification efforts using Dafny.},
url = {https://www.microsoft.com/en-us/research/publication/trigger-selection-strategies-stabilize-program-verifiers/},
}

@article{CONTRACT_VERIFICATION,
  author    = {Palina Tolmach and
               Yi Li and
               Shang{-}Wei Lin and
               Yang Liu and
               Zengxiang Li},
  title     = {A Survey of Smart Contract Formal Specification and Verification},
  journal   = {CoRR},
  volume    = {abs/2008.02712},
  year      = {2020},
  url       = {https://arxiv.org/abs/2008.02712},
  eprinttype = {arXiv},
  eprint    = {2008.02712},
  timestamp = {Wed, 07 Jul 2021 10:04:24 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/abs-2008-02712.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@ARTICLE {DAFNY,
author = {K. M. Leino},
journal = {IEEE Software},
title = {Accessible Software Verification with Dafny},
year = {2017},
volume = {34},
number = {06},
issn = {1937-4194},
pages = {94-97},
keywords = {formal verification;software reliability;software development;encoding;cognition},
doi = {10.1109/MS.2017.4121212},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {nov}
}

@Inbook{SPECSHARP,
author="Barnett, Mike
and DeLine, Robert
and F{\"a}hndrich, Manuel
and Jacobs, Bart
and Leino, K. Rustan M.
and Schulte, Wolfram
and Venter, Herman",
title="The Spec{\#} Programming System: Challenges and Directions",
bookTitle="Verified Software: Theories, Tools, Experiments: First IFIP TC 2/WG 2.3 Conference, VSTTE 2005, Zurich, Switzerland, October 10-13, 2005, Revised Selected Papers and Discussions",
year="2008",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="144--152",
abstract="The Spec{\#} programming system [4] is a new attempt to increase the quality of general purpose, industrial software. Using old wisdom, we propose the use of specifications to make programmer assumptions explicit. Using modern technology, we propose the use of tools to enforce the specifications. To increase its chances of having impact, we want to design the system so that it can be widely adopted.",
isbn="978-3-540-69149-5",
url="https://doi.org/10.1007/978-3-540-69149-5_16"
}


@INPROCEEDINGS{REENTRANCE,
author={Fatima Samreen, Noama and Alalfi, Manar H.},
booktitle={2020 IEEE International Workshop on Blockchain Oriented Software Engineering (IWBOSE)},
title={Reentrancy Vulnerability Identification in Ethereum Smart Contracts},
year={2020},
volume={},
number={},
pages={22-29},
}

@misc{SOLIDITY_EVENTS,
      title={Formal Specification and Verification of Solidity Contracts with Events},
      author={Ákos Hajdu and Dejan Jovanović and Gabriela Ciocarlie},
      year={2020},
      eprint={2005.10382},
      archivePrefix={arXiv},
      primaryClass={cs.PL}
}
